@model ExpenseTracker.Web.ViewModels.Transaction.TransactionViewModel

@{
    ViewBag.Title = "Transaction";
    Layout = "_Layout";
}

@section PageTitle
{
<div class="page-header d-print-none">
    <div class="row align-items-center">
        <div class="col">
            <!-- Page pre-title -->
            <div class="page-pretitle">
                Create
            </div>
            <h2 class="page-title">
                @ViewData["Title"]
            </h2>
        </div>
        <!-- Page title actions -->
        <div class="col-auto ms-auto d-print-none">
            <div class="btn-list">
                <a asp-action="Index" asp-controller="Transaction" class="btn btn-default d-none d-sm-inline-block">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24"
                        stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round"
                        stroke-linejoin="round">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                        <line x1="18" y1="6" x2="6" y2="18" />
                        <line x1="6" y1="6" x2="18" y2="18" />
                    </svg>
                    Cancel
                </a>
                <a asp-action="Index" asp-controller="Transaction"
                    class="btn btn-default d-sm-none d-sm-inline-block btn-icon"
                    aria-label="Create new Transaction Category">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24"
                        stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round"
                        stroke-linejoin="round">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                        <line x1="18" y1="6" x2="6" y2="18" />
                        <line x1="6" y1="6" x2="18" y2="18" />
                    </svg>
                </a>
            </div>
        </div>
    </div>
</div>
}

<div class="col-md-12">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">@ViewData["Title"]</h3>
        </div>
        <div class="card-body">
            <form method="post" asp-action="Create" asp-controller="Transaction" enctype="multipart/form-data">
                <div class="form-group mb-3 row">
                    <label asp-for="TransactionEntryDate" class="form-label col-3 col-form-label"></label>
                    <div class="col">
                        <input asp-for="TransactionEntryDate" class="form-control"
                            value="@DateTime.Now.ToString("yyyy-MM-ddThh:mm")" />
                    </div>
                </div>
                <div class="form-group mb-3 row">
                    <label asp-for="Type" class="form-label col-3 col-form-label"></label>
                    <div class="col">
                        <select asp-for="Type" asp-items="Model.TransactionTypes" class="form-control"
                            id="transactionType">
                        </select>
                    </div>
                </div>

                <div class="form-group mb-3 row">
                    <label asp-for="TransactionCategoryId" class="form-label col-3 col-form-label"></label>
                    <div class="col">
                        <select asp-for="TransactionCategoryId" asp-items="Model.TransactionCategoriesSelectList"
                            class="form-control" data-placeholder="Select category">
                        </select>
                    </div>
                </div>

                <div class="form-group mb-3 row">
                    <label asp-for="TransactionAmount" class="form-label col-3 col-form-label"></label>
                    <div class="col input-group">
                        <span class="input-group-text">
                            Rs.
                        </span>
                        <input type="number" asp-for="TransactionAmount" placeholder="Enter Transaction Amount"
                            class="form-control" autofocus>
                    </div>
                </div>
                <div class="form-group mb-3 row">
                    <label asp-for="TransactionFile" class="form-label col-3 col-form-label"></label>
                    <div class="col input-group">
                        <input type="file" class="form-control" id="TransactionFile" asp-for="TransactionFile">
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary" id="file-viewer" data-bs-toggle="offcanvas"
                                data-bs-target="#image-preview-modal">
                                <i class="fa fa-eye"></i>&nbsp; View
                            </button>
                            <button type="button" class="btn btn-danger" id="clear-file">
                                <i class="fas fa-broom"></i> Clear
                            </button>
                        </div>
                    </div>
                        <span asp-validation-for="TransactionFile" class="text-danger"></span>

                </div>
                <div class="form-group mb-3 row">
                    <label asp-for="Description" class="form-label col-3 col-form-label"></label>
                    <div class="col">
                        <textarea asp-for="Description" class="form-control" rows="5"></textarea>
                    </div>
                </div>
                <div class="form-footer">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Offcanvas for Proof display -->
<div class="offcanvas offcanvas-end" id="image-preview-modal" tabindex="-1" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="offcanvas-header">
        <h5 class="modal-title" id="exampleModalLabel">Transaction Proof</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close">
        </button>
    </div>
    <div class="offcanvas-body">
        <img id="image-preview" src="" alt="" />
    </div>
</div>
@section Styles
{
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
}

@section Scripts
{
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>

    $('#transactionType').on('change', function (e) {
        e.preventDefault();

        fetchAndUpdateCategoriesList()

    });

    function fetchAndUpdateCategoriesList() {
        let type = $('#transactionType').val();
        $.ajax({
            url: `/api/TransactionCategory/${type}/getByType`,
            type: "GET",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                $('#TransactionCategoryId').empty();
                $.each(response,
                    function (index, value) {
                        $('#TransactionCategoryId').append(`<option value="${value.id}">${value.categoryName}</option>`);
                    });
            },
            error: function (errorResponse) {
                console.log(errorResponse);
            }
        })
    }

    document.addEventListener("DOMContentLoaded", function () {
        let el;
        window.Choices && (new Choices(el = document.getElementById('transactionType'), {
            classNames: {
                containerInner: el.className,
                input: 'form-control',
                inputCloned: 'form-control-sm',
                listDropdown: 'dropdown-menu',
                itemChoice: 'dropdown-item',
                activeState: 'show',
                selectedState: 'active',
            },
            shouldSort: false,
            searchEnabled: false,
        }));
    });


    fetchAndUpdateCategoriesList();

    const transactionFileElem = document.querySelector('#TransactionFile');
    const filePreviewElem = document.querySelector("#file-viewer");
    const imageLoaderElem = document.querySelector("#image-preview");
    const clearElem = document.querySelector("#clear-file");
    let flag = false;

    transactionFileElem.addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (!validaImage(file)) {
            alert('Please select a valid image file');
            e.target.value = '';
            return;
        }
        const reader = new FileReader();

        reader.addEventListener('load', async function () {
            const url = await fetch(reader.result).then(res => res.blob()).then(x => URL.createObjectURL(x));
            const IsPDF = validatePDF(file);
            if (IsPDF) {
                filePreviewElem.setAttribute('href', url);
                filePreviewElem.setAttribute('target', '_blank');
                filePreviewElem.removeAttribute('data-bs-target');
                filePreviewElem.removeAttribute('data-bs-toggle');
                flag = true;
            } else if (flag) {
                filePreviewElem.setAttribute('data-bs-target', '#image-preview-modal');
                filePreviewElem.setAttribute('data-bs-toggle', 'modal');
                filePreviewElem.removeAttribute('href', url);
                filePreviewElem.removeAttribute('target', '_blank');
                flag = false;
            }
            imageLoaderElem.src = reader.result;
        });
        reader.readAsDataURL(file);
    });

    function validatePDF(file) {
        const fileExtension = file.name.split('.').pop();
        if (fileExtension === 'pdf') return true;
    }

    function validaImage(file) {
        const fileExtension = file.name.split('.').pop();
        if (fileExtension === 'jpg' || fileExtension === 'png' || fileExtension === 'jpeg' || fileExtension === 'pdf') return true;
    }

    clearElem.addEventListener('click', _ => {
        transactionFileElem.value = "";
    })

</script>
}